/**
 * (c) 2003-2012 MuleSoft, Inc. This software is protected under international
 * copyright law. All use of this software is subject to MuleSoft's Master
 * Subscription Agreement (or other Terms of Service) separately entered
 * into between you and MuleSoft. If such an agreement is not in
 * place, you may not use the software.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.kindling;

import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Optional;
import org.mule.module.kindling.client.KindlingClient;
import org.mule.module.kindling.client.authentication.KindlingAuthentication;
import org.mule.module.kindling.client.authentication.impl.KindlingAuthenticationBasic;
import org.mule.module.kindling.client.impl.KindlingClientImpl;
import org.mule.module.kindling.exception.KindlingConnectorException;
import org.mule.module.kindling.exception.KindlingConnectorUnauthorizedException;
import org.mule.module.kindling.types.KindlingCategoryState;
import org.mule.module.kindling.types.KindlingCommentParentType;
import org.mule.module.kindling.types.KindlingCommentType;
import org.mule.module.kindling.types.KindlingIdeaFilter;
import org.mule.module.kindling.types.KindlingState;
import org.mule.module.kindling.types.KindlingUserDigest;
import org.mule.module.kindling.types.KindlingUserReputationTimeframe;
import org.mule.module.kindling.types.KindlingUserState;

/**
 * Kindling Cloud Connector
 * <p>
 * Kindling ignites innovation by connecting people and ideas
 * <p>
 * Allows to connect to the kindling site across the Kindling Service API.
 * Connector created with the documentation of the service for the version v3.9.2.0
 * <p>
 * The supported actions provided for each entity are:
 * <table>
 * 	<tr>
 * 		<td>Entity name</td>
 * 		<td>Retrieve Collection</td>
 * 		<td>Retrieve single</td>
 * 		<td>Create</td>
 * 		<td>Update</td>
 * 		<td>Delete</td>
 * 	</tr>
 * 	<tr>
 * 		<td>Group</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td></td>		
 * 	</tr>
 * 	<tr>
 * 		<td>Comment</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td></td>
 * 		<td>x</td>		
 * 	</tr>
 * 	<tr>
 * 		<td>Idea</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td></td>		
 * 	</tr>
 * 	<tr>
 * 		<td>User</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>		
 * 	</tr>
 * 	<tr>
 * 		<td>Category</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td>x</td>
 * 		<td></td>		
 * 	</tr>
 * </table>
 * <h3>Entity representations</h3>
 * <b>group.json-collection (application/json)</b>
 * <pre>
 * {@code 
 * {
 *     "meta": {
 *         "count":        "integer",
 *         "totalCount":   "integer",
 *         "totalPages":   "integer",
 *         "parameters": {
 *             "page":     "integer",
 *             "limit":    "integer",
 *             "sort":     "string",
 *             "*":        "*"
 *         }
 *     },
 *     "results": ["group.json"]
 * }
 * }
 * </pre>
 * <p>
 * <b>group.json (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "className":                    "string(Group_Managed|Group_Smart_*)",
 *     "id":                           "integer",
 *     "title":                        "string",
 *     "description":                  "string",
 *     "type":                         "string(smart|managed)",
 *     "stateId":                      "integer(1|3|8)",
 *     "stateName":                    "string(Activated|Archived|Disabled)",
 *     "requiresLdap":                 "boolean",
 *     "parameters":                   "json",
 *     "dateCreated":                  "date",
 *     "dateCreatedLocalized":         "dateFormatted",
 *     "dateUpdated":                  "date",
 *     "dateUpdatedLocalized":         "dateFormatted",
 *     "resourceUri":                  "string(\/api\/groups\/$id)",
 *     "applicationUri":               "string(\/groups\/$id)",
 *     "depth>0(members)":             ["user.json|integer"],
 *     "depth>0(moderators)":          ["user.json|integer"],
 *     "depth>0(categories)":          ["category.json|integer"]
 * }
 * }
 * </pre>
 * <p>
 * <b>comment.json-collection (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "meta": {
 *         "count":        "integer",
 *         "totalCount":   "integer",
 *         "totalPages":   "integer",
 *         "parameters": {
 *             "page":     "integer",
 *             "limit":    "integer",
 *             "sort":     "string",
 *             "*":        "*"
 *         }
 *     },
 *     "results": ["comment.json"]
 * }
 * }
 * </pre>
 * <p>
 * <b>comment.json (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "className":                                "string(Comment)",
 *     "id":                                       "integer",
 *     "owner(Id)":                                "user.json|integer",
 *     "parentType":                               "string(ideas|posts)",
 *     "matchOptionIndex=parentType(parent(Id))":  "idea.json|post.json|integer",
 *     "type":                                     "string(user|moderator)",
 *     "description":                              "html",
 *     "dateCreated":                              "date",
 *     "dateCreatedLocalized":                     "dateFormatted",
 *     "stateId":                                  "integer(1|3)",
 *     "stateName":                                "string(Activated|Archived)",
 *     "resourceUri":                              "string(\/api\/comments\/$id)",
 *     "depth>0(attachments)":                     ["attachment.json"]
 * }
 * }
 * </pre>
 * <p>
 * <b>idea.json-collection (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "meta": {
 *         "count":        "integer",
 *         "totalCount":   "integer",
 *         "totalPages":   "integer",
 *         "parameters": {
 *             "page":     "integer",
 *             "limit":    "integer",
 *             "sort":     "string",
 *             "*":        "*"
 *         }
 *     },
 *     "results": ["idea.json"]
 * }
 * }
 * </pre>
 * <p>
 * <b>idea.json (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "className":                "string(Idea)",
 *     "id":                       "integer",
 *     "category(Id)":             "category.json|integer",
 *     "title":                    "string",
 *     "description":              "html",
 *     "votes":                    "integer",
 *     "anonymous":                "integer",
 *     "dateCreated":              "date",
 *     "dateCreatedLocalized":     "dateFormatted",
 *     "dateUpdated":              "date",
 *     "dateUpdatedLocalized":     "dateFormatted",
 *     "dateManaged":              "date",
 *     "dateManagedLocalized":     "dateFormatted",
 *     "dateRectified":            "date",
 *     "dateRectifiedLocalized":   "dateFormatted",
 *     "stateId":                  "integer(9|13|14|7|2|5|3|?)",
 *     "stateName":                "string(Drafted|Open|Paused|Declined|Approved|Completed|Archived|?)",
 *     "cachedTags":               "string",
 *     "lockedForComments":        "boolean",
 *     "bonfireUrl":               "string",
 *     "submissionSource":         "string",
 *     "resourceUri":              "string(\/api\/ideas\/$id)",
 *     "applicationUri":           "string(\/ideas\/$id)",
 *     "assignedTo":               "integer",
 *     "author(Id)":               "user.json|integer",
 *     "depth>0(tags)":            ["string"],
 *     "depth>0(comments)":        ["comment.json"],
 *     "currentUserInfo": {
 *         "votes":                "integer",
 *         "votesAvailable":       "integer",
 *         "votesMax":             "integer",
 *         "votesTotal":           "integer",
 *         "voterCount":           "integer",
 *         "ideaId":               "integer($id)",
 *         "categoryId":           "integer($categoryId)",
 *         "isVotable":            "boolean"
 *     }
 * }
 * }
 * </pre>
 * <p>
 * <b>user.json-collection (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "meta": {
 *         "count":        "integer",
 *         "totalCount":   "integer",
 *         "totalPages":   "integer",
 *         "parameters": {
 *             "page":     "integer",
 *             "limit":    "integer",
 *             "sort":     "string",
 *             "*":        "*"
 *         }
 *     },
 *     "results": ["user.json"]
 * }
 * }
 * </pre>
 * <p>
 * <b>user.json (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "className":            "string(User)",
 *     "id":                   "integer",
 *     "avatar(Id)":           "attachment.json|integer",
 *     "username":             "string",
 *     "firstName":            "string",
 *     "lastName":             "string",
 *     "email":                "email",
 *     "emailPreferences":     "string(all|digest-nightly|digest-weekly|none)",
 *     "votesTotal":           "integer",
 *     "reputation":           "integer",
 *     "stateId":              "integer(11|1|8|3)",
 *     "stateName":            "string(Invited|Activated|Disabled|Archived)",
 *     "resetRequested":       "date",
 *     "storNotification":     "boolean",
 *     "backend":              "string",
 *     "fullName":             "string($firstName $lastName)",
 *     "avatarUri":            "string(\/api\/users\/$id\/avatar)",
 *     "resourceUri":          "string(\/api\/users\/$id)",
 *     "applicationUri":       "string(\/users\/$id)",
 *     "locale":               "string",
 *     "lastLogin":            "date",
 *     "lastLoginLocalized":   "dateFormatted",
 *     "dateCreated":          "date",
 *     "dateCreatedLocalized": "dateFormatted",
 *     "depth>0(skills)":      ["string"],
 *     "depth>0(interests)":   ["string"],
 *     "depth>0(categories)":  ["category.json|integer"]
 * }
 * }
 * </pre>
 * <p>
 * <b>category.json-collection (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "meta": {
 *         "count":        "integer",
 *         "totalCount":   "integer",
 *         "totalPages":   "integer",
 *         "parameters": {
 *             "page":     "integer",
 *             "limit":    "integer",
 *             "sort":     "string",
 *             "*":        "*"
 *         }
 *     },
 *     "results": ["category.json"]
 * }
 * }
 * </pre>
 * <p>
 * <b>category.json (application/json)</b>
 * <pre>
 * {@code
 * {
 *     "className":                "string(Category|Category_Campaign)",
 *     "id":                       "integer",
 *     "parent(Id)":               "category.json|integer",
 *     "owner(Id)":                "user.json|integer",
 *     "slug":                     "string",
 *     "title":                    "string",
 *     "description":              "string",
 *     "stateId":                  "integer(1|8|3|12|21|17)",
 *     "stateName":                "string(Activated|Disabled|Archived|Locked|Queued|Ended)",
 *     "dateCreated":              "date",
 *     "dateCreatedLocalized":     "dateFormatted",
 *     "dateUpdated":              "date",
 *     "dateUpdatedLocalized":     "dateFormatted",
 *     "isDefault":                "boolean",
 *     "submitIdeaRestriction":    "string(all|moderators)",
 *     "dateStart":                "date",
 *     "dateStartLocalized":       "dateFormatted",
 *     "dateEnd":                  "date",
 *     "dateEndLocalized":         "dateFormatted",
 *     "notifyPhase":              "integer",
 *     "notifyStart":              "integer",
 *     "notifyDaysLeft":           "integer",
 *     "notifyEnd":                "integer",
 *     "reward":                   "string",
 *     "fullyQualifiedTitle":      "string",
 *     "hierarchy":                ["string"],
 *     "ideas": {
 *         "count":                "integer",
 *         "collectionUri":        "string(\/api\/ideas?category=$id)"
 *     },
 *     "resourceUri":              "string(\/api\/categories\/$id)",
 *     "applicationUri":           "string(\/categories\/$id)",
 *     "voteMax":                  "integer",
 *     "depth>0(groups)":          ["group.json|integer"]
 * } 
 * }
 * </pre>
 * @author MuleSoft, Inc.
 */
@Connector(name="kindling", schemaVersion="1.1", friendlyName="Kindling")
public class KindlingConnector
{
	
	/**
	 * The name of the company registered in kindling and used for access your site like https://{companyName}.kindlingapp.com
	 */
	@Configurable
	private String companyName;
	
	private KindlingClient client;
	
	public String getCompanyName() {
		return companyName;
	}

	public void setCompanyName(String companyName) {
		this.companyName = companyName;
	}
	
    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password)
        throws ConnectionException {
    	
    	KindlingAuthentication auth = new KindlingAuthenticationBasic(username, password);
    	client = new KindlingClientImpl(companyName, auth);
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
    	client = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return client != null;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    
    /**
     * Gets the groups collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-groups}
     * 
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @param sort <i>Default: title.</i> How the collection output will be sorted, like 'date ASC', 'date', or 'name DESC' etc.
     * @param page <i>Default: 1.</i> The page requested
     * @param limit <i>Default: 20</i> The limit on number of collection items to show per page
     * @param state <i>Default: ACTIVATED.</i> Get only items in the collection that are in the given state, either by a state ID or it's natural language name
     * @param startsWith find group titles beginning with this string
     * @param query a general group search
     * @return group.json-collection
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveGroups(@Optional Integer depth,
	    						@Optional String sort,
	    						@Optional Integer page,
	    						@Optional Integer limit,
	    						@Optional KindlingState state,
	    						@Optional String startsWith,
	    						@Optional String query) 
    		throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveGroups(depth, sort, page, limit, state, startsWith, query);
    }
    
    /**
     * Gets a single group
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-group}
     * 
     * @param groupId The id of the group to retrieve
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * group.json
     * @return group.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveGroup(String groupId, @Optional Integer depth)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveGroup(groupId, depth);
    }
    
    /**
     * Updates a single group
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:update-group}
     * 
     * @param groupId  The id of the group to retrieve
     * @param groupJson The group to create in JSON format
     * @return group.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String updateGroup(String groupId, String groupJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.updateGroup(groupId, groupJson);
    }
    
    /**
     * Create a new group in the groups collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:create-group}
     * 
     * @param groupJson The group to create in JSON format
     * @return group.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String createGroup(String groupJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.createGroup(groupJson);
    }

    /**
     * Gets the comments collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-comments}
     * 
     * @param parentType Retrieve only comments whose parent is of this type
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @param sort <i>Default: title.</i> How the collection output will be sorted, like 'date ASC', 'date', or 'name DESC' etc.
     * @param page <i>Default: 1.</i> The page requested
     * @param limit <i>Default: 20</i> The limit on number of collection items to show per page
     * @param state <i>Default: ACTIVATED.</i> Get only items in the collection that are in the given state, either by a state ID or it's natural language name
     * @param parentId Retrieve only comments of a specific parent ID
     * @param type The type of comments to retrieve
     * @return comment.json-collection
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveComments(
    						KindlingCommentParentType parentType,
    						@Optional Integer depth,
							@Optional String sort,
							@Optional Integer page,
							@Optional Integer limit,
							@Optional KindlingState state,
							@Optional Integer parentId,
							@Optional KindlingCommentType type)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveComments(parentType, depth, sort, page, limit, state, parentId, type);
    }
    
    /**
     * Creates a new comment in the comments collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:create-comment}
     *     
     * @param commentJson A comment representation in JSON format
     * @return comment.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String createComment(String commentJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.createComment(commentJson);
    }
    
    /**
     * Gets a single comment
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-comment}
     * 
     * @param commentId The id of the comment to retrieve
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @return comment.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveComment(String commentId, @Optional Integer depth)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveComment(commentId, depth);
    }
    
    /**
     * Deletes a single comment
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:delete-comment}
     * 
     * @param commentId The id of the comment to delete
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public void deleteComment(String commentId)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	client.deleteComment(commentId);
    }
    
    /**
     * Gets the ideas collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-ideas}
     * 
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @param sort <i>Default: title.</i> How the collection output will be sorted, like 'date ASC', 'date', or 'name DESC' etc.
     * @param page <i>Default: 1.</i> The page requested
     * @param limit <i>Default: 20</i> The limit on number of collection items to show per page
     * @param state Get only items in the collection that are in the given state, either by a state ID or it's natural language name
     * <p>
     * <ul>
     * 	<li>drafted</li>
     * 	<li>open</li>
     * 	<li>approved</li>
     * 	<li>completed</li>
     * 	<li>declined</li>
     * 	<li>paused</li>
     * 	<li>others depending on workflow settings</ul>
     * </ul>
     * @param allowsVoting only show ideas that can or cannot be voted upon
     * @param query a general idea search string
     * @param authorId show only ideas from a particular author
     * @param categoryId show only ideas in a particular category
     * @param filter conceptual filters
     * @return ideas.json-collection
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveIdeas(@Optional Integer depth,
								@Optional String sort,
								@Optional Integer page,
								@Optional Integer limit,
								@Optional String state,
								@Optional Boolean allowsVoting,
								@Optional String query,
								@Optional String authorId,
								@Optional String categoryId,
								@Optional KindlingIdeaFilter filter)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveIdeas(depth, sort, page, limit, state, allowsVoting, query, authorId, categoryId, filter);
    }
    
    /**
     * Create a new idea in the ideas collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:create-idea}
     * 
     * @param ideaJson The representation of an Idea in JSON format
     * @return idea.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String createIdea(String ideaJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.createIdea(ideaJson);
    }
    
    /**
     * Gets a single idea
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-idea}
     * 
     * @param ideaId The id of the Idea to retrieve
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @return idea.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveIdea(	String ideaId,
    							@Optional Integer depth)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveIdea(ideaId, depth);
    }
    
    /**
     * Updates a single idea
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:update-idea}
     * 
     * @param ideaId The id of the Idea to update
     * @param ideaJson The representation of the Idea in JSON format
     * @return idea.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String updateIdea(String ideaId, String ideaJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.updateIdea(ideaId, ideaJson);
    }
    
    /**
     * Gets the users collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-users}
     * 
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @param sort <i>Default: title.</i> How the collection output will be sorted, like 'date ASC', 'date', or 'name DESC' etc.
     * @param page <i>Default: 1.</i> The page requested
     * @param limit <i>Default: 20.</i> The limit on number of collection items to show per page
     * @param state <i>Default: ACTIVATED.</i> Get only items in the collection that are in the given state, either by a state ID or it's natural language name
     * @param associatedWithCategoryId only show users associated with a particular category
     * @param digest show only users with a particular type of digest set
     * @param query general user search string
     * @param reputationTimeframe if present, will turn this request into one specifically for reputation leaders for a given timeframe, which may be combined with the associatedWithCategoryId parameter as well to return a leaderbooard for a category
     * @return user.json-collection
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveUsers(@Optional Integer depth,
								@Optional String sort,
								@Optional Integer page,
								@Optional Integer limit,
								@Optional KindlingUserState state,
								@Optional Integer associatedWithCategoryId,
								@Optional KindlingUserDigest digest,
								@Optional String query,
								@Optional KindlingUserReputationTimeframe reputationTimeframe)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveUsers(depth, sort, page, limit, state, associatedWithCategoryId, digest, query, reputationTimeframe);
    }
    
    /**
     * Creates a new user in the users collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:create-user}
     * 
     * @param userJson The user to create in JSON format
     * @return user.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String createUser(String userJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.createUser(userJson);
    }
    
    /**
     * Gets a single user
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:create-user}
     * 
     * @param userId The id of the user to retrieve
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @return user.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveUser(	String userId,
    							@Optional Integer depth)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveUser(userId, depth);
    }
    
    /**
     * Updates a single user
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:update-user}
     * 
     * @param userId The id of the user to update
     * @param userJson The representation of the user in JSON format
     * @return user.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String updateUser(String userId, String userJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.updateUser(userId, userJson);
    }
    
    /**
     * Deletes a single user
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:delete-user}
     * 
     * @param userId The id of the user to delete
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public void deleteUser(String userId)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	client.deleteUser(userId);
    }
    
    /**
     * Gets the categories collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-categories}
     * 
     * 
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @param sort <i>Default: title.</i> How the collection output will be sorted, like 'date ASC', 'date', or 'name DESC' etc.
     * @param page <i>Default: 1.</i> The page requested
     * @param limit <i>Default: 20.</i> The limit on number of collection items to show per page
     * @param state <i>Default: ACTIVATED.</i> Get only items in the collection that are in the given state, either by a state ID or it's natural language name
     * @param query a general category search
     * @param associatedWithUserId If provided, will only return categories that the given user ID has access to
     * @return category.json-collection
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveCategories(@Optional Integer depth,
									@Optional String sort,
									@Optional Integer page,
									@Optional Integer limit,
									@Optional KindlingCategoryState state,
									@Optional String query,
									@Optional Integer associatedWithUserId)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveCategories(depth, sort, page, limit, state, query, associatedWithUserId);
    }
    
    /**
     * Creates a new category in the categories collection
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:create-category}
     * 
     * @param categoryJson The category representation to create in JSON format
     * @return category.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String createCategory(String categoryJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.createCategory(categoryJson);
    }
    
    /**
     * Gets a single category
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:retrieve-category}
     * 
     * @param categoryId The id of the category to retrieve
     * @param depth <i>Default: 0.</i> Any object in the result can be displayed at depth, 0 = no depth, 1 = expand first relational object level, etc.
     * @return category.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String retrieveCategory(	String categoryId,
    								@Optional Integer depth)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.retrieveCategory(categoryId, depth);
    }
    
    /**
     * Updates a single category
     * <p>
     * {@sample.xml ../../../doc/kindling-connector.xml.sample kindling:update-category}
     * 
     * @param categoryId The id of the category to update
     * @param categoryJson The category representation in JSON format
     * @return category.json
     * @throws KindlingConnectorException If something goes wrong with the service API this exception is throw
     * @throws KindlingConnectorUnauthorizedException If the credentials provided for the user are wrong or are expired this exception is throw
     */
    @Processor
    public String updateCategory(String categoryId, String categoryJson)
    	throws KindlingConnectorException, KindlingConnectorUnauthorizedException {
    	
    	return client.updateCategory(categoryId, categoryJson);
    }
    
    
}
